{"version":3,"sources":["apollo/queries.ts","store/PeopleStore.ts","components/Loading.tsx","store/DetailsStore.ts","components/Details.tsx","components/PersonCard.tsx","components/PeopleList.tsx","components/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GET_PEOPLE","gql","peopleStore","apolloClient","ApolloClient","uri","cache","InMemoryCache","paginationSize","people","loading","pages","showPersonModal","makeAutoObservable","this","getPeople","action","pageNumber","a","queryOptions","query","variables","then","response","runInAction","data","results","Math","ceil","count","catch","reason","console","error","finally","peopleContext","createContext","sayings","Loading","className","Segment","Dimmer","active","Loader","floor","random","detailsStore","activePerson","setActivePerson","getActivePerson","computed","detailsLink","person","detailsContext","Details","useContext","gender","genderIconValue","name","homeworld","Divider","height","mass","to","PersonCard","onClick","style","fontSize","PeopleList","observer","map","index","Header","App","useState","activePage","setactivePage","useEffect","path","Pagination","onPageChange","e","totalPages","ellipsisItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Provider","value","document","getElementById"],"mappings":"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","file":"static/js/main.58429f49.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const GET_PEOPLE = gql`\n  query GetPeople($pageNumber: String) {\n    people(page: $pageNumber) {\n      count\n      results {\n        name\n        height\n        mass\n        gender\n        homeworld {\n          name\n        }\n      }\n    }\n  }\n`;\n","import { makeAutoObservable, action, runInAction } from \"mobx\";\nimport { TPerson } from \"./types/TPerson\";\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport { createContext } from \"react\";\nimport { GET_PEOPLE } from \"../apollo/queries\";\nimport { TResults } from \"./types/TResults\";\n\nclass PeopleStore {\n  constructor() {\n    makeAutoObservable(this, {\n      getPeople: action\n    });\n  }\n  readonly apolloClient = new ApolloClient({\n    uri: \"https://tfymi.sse.codesandbox.io/\",\n    cache: new InMemoryCache(),\n  });\n\n  private paginationSize: number = 10;\n  people: TPerson[] = [];\n  loading: boolean = true;\n  pages: number = 0;\n  showPersonModal: boolean = false;\n\n  async getPeople(pageNumber?: string) {\n    this.loading = true;\n\n    const queryOptions = pageNumber\n      ? {\n          query: GET_PEOPLE,\n          variables: { pageNumber: pageNumber },\n        }\n      : { query: GET_PEOPLE };\n\n    this.apolloClient\n      .query<TResults>(queryOptions)\n      .then((response) => {\n        runInAction(() => {\n          this.people = response.data.people.results;\n          this.pages = Math.ceil(\n            response.data.people.count / this.paginationSize\n          );\n        });\n      }).catch((reason) => {\n        console.error(reason);\n      })\n      .finally(() => {\n        runInAction(() => {\n          this.loading = false;\n        });\n      });\n  }\n}\n\nexport const peopleStore = new PeopleStore();\nexport const peopleContext = createContext<PeopleStore>(peopleStore);\n","import React from \"react\";\nimport { Dimmer, Loader, Segment } from \"semantic-ui-react\";\n\nconst sayings = [\n  \"“Try not. Do or do not. There is no try.”\",\n  \"“Your eyes can deceive you; don’t trust them.”\",\n  \"“No longer certain that one ever does win a war, I am.”\",\n  \"“The ability to speak does not make you intelligent.”\",\n  \"“Sorry lady. I don’t understand frog.”\"\n];\n\nexport const Loading = () => (\n  <div className=\"mt-20 w-full h-screen grid justify-items-center grid-cols-1\">\n    <Segment className=\"h-1/2 w-2/3 sm:w-1/3\">\n      <Dimmer active>\n        <Loader>{sayings[Math.floor(Math.random() * 4)]}</Loader>\n      </Dimmer>\n    </Segment>\n  </div>\n);\n","import { makeAutoObservable, action, computed } from \"mobx\";\nimport { TPerson } from \"./types/TPerson\";\nimport { createContext } from \"react\";\n\nclass DetailsStore {\n  constructor() {\n    makeAutoObservable(this, {\n      setActivePerson: action,\n      getActivePerson: computed,\n      detailsLink: computed,\n    });\n  }\n\n  private activePerson?: TPerson;\n\n  setActivePerson(person: TPerson) {\n    this.activePerson = person;\n  }\n\n  get detailsLink() {\n    return \"/details\";\n  }\n\n  get getActivePerson() {\n    return this.activePerson;\n  }\n}\n\nexport const detailsStore = new DetailsStore();\nexport const detailsContext = createContext<DetailsStore>(detailsStore);\n","import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Divider } from \"semantic-ui-react\";\nimport { detailsContext } from \"../store/DetailsStore\";\n\nexport const Details = () => {\n  const detailsStore = useContext(detailsContext);\n  const gender = detailsStore.getActivePerson?.gender;\n  const genderIconValue =\n    gender === \"male\"\n      ? \"man icon\"\n      : gender === \"female\"\n      ? \"woman icon\"\n      : \"question icon\";\n\n  return (\n    <>\n      <div className=\"h-screen w-full text-center\">\n        <h3 className=\"font-Prompt text-7xl sm:text-8xl mb-20 pt-20 px-4\">\n          {detailsStore.getActivePerson?.name}\n        </h3>\n\n        <div className=\"text-2xl sm:text-3xl mb-24 sm:mb-36 lg:mb-40 tracking-cust-wider\">\n          <i className=\"globe icon block\" />\n          <span className=\"block mt-4\"></span>\n          {detailsStore.getActivePerson?.homeworld.name}\n        </div>\n\n        <div className=\"grid grid-cols-1 grid-flow-col justify-items-center\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 grid-flow-row md:grid-flow-col w-2/3 md:gap-20\">\n            <div className=\"mb-14\">\n              <span className=\"font-Prompt tracking-cust-prompt-wider block uppercase\">\n                Gender\n              </span>\n              <Divider />\n              <i className={`${genderIconValue} genderIcon`} />\n            </div>\n            <div className=\"mb-14\">\n              <span className=\"font-Prompt tracking-cust-prompt-wider block uppercase\">\n                Height\n              </span>\n              <Divider />\n              {detailsStore.getActivePerson?.height}\n            </div>\n            <div className=\"mb-14\">\n              <span className=\"font-Prompt tracking-cust-prompt-wider block uppercase\">\n                Mass\n              </span>\n              <Divider />\n              {detailsStore.getActivePerson?.mass}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-8 sm:mt-44\">\n          <Link className=\"hover:text-red-800\" to=\"/\"><i className=\"block arrow alternate circle left outline icon backIcon\"></i></Link>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { TPerson } from \"../store/types/TPerson\";\nimport { detailsContext } from \"../store/DetailsStore\";\nimport { Link } from \"react-router-dom\";\nimport { Divider } from \"semantic-ui-react\";\n\ninterface IPersonCardProps {\n  person: TPerson;\n}\nexport const PersonCard: React.FC<IPersonCardProps> = ({ person }) => {\n  const detailsStore = useContext(detailsContext);\n\n  return (\n    <Link\n      className=\"justify-self-center w-10/12 text-center mb-20 mt-10 shadow-cust-blue p-10 rounded\n      hover:text-red-800\"\n      onClick={() => detailsStore.setActivePerson(person)}\n      to={detailsStore.detailsLink}\n    >\n      <div className=\"text-center\">\n        <div className=\"mb-6\">\n          <i\n            style={{ fontSize: \"1.85em\" }}\n            className=\"user outline icon\"\n          ></i>\n        </div>\n        <div className=\"text-2xl sm:text-lg font-mono mt-4\">{person.name}</div>\n        <Divider />\n        <div className=\"tracking-cust-wider\">{person.homeworld.name}</div>\n      </div>\n    </Link>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { peopleContext } from \"../store/PeopleStore\";\nimport { PersonCard } from \"./PersonCard\";\n\nexport const PeopleList: React.FC = observer(() => {\n  const peopleStore = useContext(peopleContext);\n\n  return (\n    <div className=\"grid justify-items-center w-full\">\n      <div\n        className={`grid justify-items-center sm:grid-cols-2 grid-cols-1 gap-4 clear-both mb-16 w-full lg:w-2/3`}\n      >\n        {peopleStore.people.map((person, index) => {\n          return <PersonCard key={`person-${index}`} person={person} />;\n        })}\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\n\nexport const Header: React.FC = () => {\n  return <div className=\"w-full text-center py-14 mb-8\">\n      <h1 className=\"lg:text-8xl text-6xl sm:text-8xl text-black\"><span className=\"italic font-bold\">SWAPI</span>-PLE</h1>\n  </div>;\n};\n","import { observer } from \"mobx-react\";\nimport React, { useContext, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { peopleContext } from \"./store/PeopleStore\";\nimport { Loading } from \"./components/Loading\";\nimport { Pagination } from \"semantic-ui-react\";\nimport { useEffect } from \"react\";\nimport { Details } from \"./components/Details\";\nimport { PeopleList } from \"./components/PeopleList\";\nimport { Header } from \"./components/Header\";\n\nexport const App: React.FC = observer(() => {\n  const peopleStore = useContext(peopleContext);\n  const [activePage, setactivePage] = useState<string>(\"1\"); // Spice it up with a hook\n\n  useEffect(() => {\n    peopleStore.getPeople();\n  }, [peopleStore]);\n\n  return (\n    <div className=\"h-full\">\n      <div className=\"grid justify-items-center grid-cols-1\">\n        <Router>\n          <Switch>\n            <Route path=\"/details\">\n              <Details />\n            </Route>\n\n            <Route path=\"/\">\n              {!peopleStore.loading && (\n                <>\n                  <Header />\n                  <PeopleList />\n                  <Pagination\n                    activePage={activePage}\n                    onPageChange={(e, { activePage }) => {\n                      setactivePage(`${activePage}`);\n                      peopleStore.getPeople(`${activePage}`);\n                    }}\n                    totalPages={peopleStore.pages}\n                    ellipsisItem={null}\n                  />\n                </>\n              )}\n              {peopleStore.loading && <Loading />}\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    </div>\n  );\n});\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { peopleContext, peopleStore } from \"./store/PeopleStore\";\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <peopleContext.Provider value={peopleStore}>\n      <App />\n    </peopleContext.Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}