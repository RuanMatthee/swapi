{"version":3,"sources":["apollo/queries.ts","store/PeopleStore.ts","components/Loading.tsx","store/DetailsStore.ts","components/Details.tsx","components/PersonCard.tsx","components/PeopleList.tsx","components/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GET_PEOPLE","gql","peopleStore","apolloClient","ApolloClient","uri","cache","InMemoryCache","paginationSize","people","loading","pages","showPersonModal","makeAutoObservable","this","getPeople","action","pageNumber","a","queryOptions","query","variables","console","log","then","response","runInAction","data","results","Math","ceil","count","finally","peopleContext","createContext","sayings","Loading","className","Segment","Dimmer","active","Loader","floor","random","detailsStore","activePerson","setActivePerson","getActivePerson","computed","detailsLink","person","detailsContext","Details","useContext","name","homeworld","PersonCard","onClick","to","style","fontSize","Divider","PeopleList","observer","map","index","Header","App","useState","activePage","setactivePage","useEffect","path","Pagination","onPageChange","e","totalPages","ellipsisItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Provider","value","document","getElementById"],"mappings":"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","file":"static/js/main.f4aad58d.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const GET_PEOPLE = gql`\n  query GetPeople($pageNumber: String) {\n    people(page: $pageNumber) {\n      count\n      results {\n        name\n        height\n        mass\n        gender\n        homeworld {\n          name\n        }\n      }\n    }\n  }\n`;\n","import { makeAutoObservable, action, runInAction } from \"mobx\";\nimport { TPerson } from \"./types/TPerson\";\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport { createContext } from \"react\";\nimport { GET_PEOPLE } from \"../apollo/queries\";\nimport { TResults } from \"./types/TResults\";\n\nclass PeopleStore {\n  constructor() {\n    makeAutoObservable(this, {\n      getPeople: action\n    });\n  }\n  readonly apolloClient = new ApolloClient({\n    uri: \"https://tfymi.sse.codesandbox.io/\",\n    cache: new InMemoryCache(),\n  });\n\n  private paginationSize: number = 10;\n  people: TPerson[] = [];\n  loading: boolean = true;\n  pages: number = 0;\n  showPersonModal: boolean = false;\n\n  async getPeople(pageNumber?: string) {\n    this.loading = true;\n\n    const queryOptions = pageNumber\n      ? {\n          query: GET_PEOPLE,\n          variables: { pageNumber: pageNumber },\n        }\n      : { query: GET_PEOPLE };\n\n    console.log(\"queryOptions\", queryOptions);\n\n    this.apolloClient\n      .query<TResults>(queryOptions)\n      .then((response) => {\n        console.log(\"data\", response);\n\n        runInAction(() => {\n          this.people = response.data.people.results;\n          this.pages = Math.ceil(\n            response.data.people.count / this.paginationSize\n          );\n        });\n      })\n      .finally(() => {\n        runInAction(() => {\n          this.loading = false;\n        });\n      });\n  }\n}\n\nexport const peopleStore = new PeopleStore();\nexport const peopleContext = createContext<PeopleStore>(peopleStore);\n","import React from \"react\";\nimport { Dimmer, Loader, Segment } from \"semantic-ui-react\";\n\nconst sayings = [\n  \"“Try not. Do or do not. There is no try.”\",\n  \"“Your eyes can deceive you; don’t trust them.”\",\n  \"“No longer certain that one ever does win a war, I am.”\",\n  \"“The ability to speak does not make you intelligent.”\",\n  \"“Sorry lady. I don’t understand frog.”\"\n];\n\nexport const Loading = () => (\n  <div className=\"w-full h-screen grid justify-items-center grid-cols-1\">\n    <Segment className=\"h-1/2 w-1/3\">\n      <Dimmer active>\n        <Loader>{sayings[Math.floor(Math.random() * 4)]}</Loader>\n      </Dimmer>\n    </Segment>\n  </div>\n);\n","import { makeAutoObservable, action, computed } from \"mobx\";\nimport { TPerson } from \"./types/TPerson\";\nimport { createContext } from \"react\";\n\nclass DetailsStore {\n  constructor() {\n    makeAutoObservable(this, {\n      setActivePerson: action,\n      getActivePerson: computed,\n      detailsLink: computed,\n    });\n  }\n\n  private activePerson?: TPerson;\n\n  setActivePerson(person: TPerson) {\n    this.activePerson = person;\n  }\n\n  get detailsLink() {\n    return \"/details\";\n  }\n\n  get getActivePerson() {\n    return this.activePerson;\n  }\n}\n\nexport const detailsStore = new DetailsStore();\nexport const detailsContext = createContext<DetailsStore>(detailsStore);\n","import React, { useContext } from \"react\";\nimport { detailsContext } from \"../store/DetailsStore\";\n\nexport const Details = () => {\n  const detailsStore = useContext(detailsContext);\n\n  return (\n    <>\n      <h3 className=\"text-7xl\">{detailsStore.getActivePerson?.name}</h3>\n      <div className=\"text-3xl\">\n        {detailsStore.getActivePerson?.homeworld.name}\n      </div>\n    </>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { TPerson } from \"../store/types/TPerson\";\nimport { detailsContext } from \"../store/DetailsStore\";\nimport { Link } from \"react-router-dom\";\nimport { Divider } from \"semantic-ui-react\";\n\ninterface IPersonCardProps {\n  person: TPerson;\n}\nexport const PersonCard: React.FC<IPersonCardProps> = ({ person }) => {\n  const detailsStore = useContext(detailsContext);\n\n  return (\n    <Link\n      className=\"justify-self-center w-10/12 text-center mb-20 mt-10 shadow-cust-blue p-10 rounded\"\n      onClick={() => detailsStore.setActivePerson(person)}\n      to={detailsStore.detailsLink}\n    >\n      <div className=\"text-center\">\n        <div>\n          <i\n            style={{ fontSize: \"1.85em\" }}\n            className=\"address card outline icon\"\n          ></i>\n        </div>\n        <div className=\"text-2xl font-mono mt-4\">{person.name}</div>\n        <Divider />\n        <div className=\"tracking-cust-wider\">{person.homeworld.name}</div>\n      </div>\n    </Link>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { peopleContext } from \"../store/PeopleStore\";\nimport { PersonCard } from \"./PersonCard\";\n\nexport const PeopleList: React.FC = observer(() => {\n  const peopleStore = useContext(peopleContext);\n\n  return (\n    <div className=\"grid justify-items-center w-full\">\n      <div\n        className={`grid justify-items-center grid-cols-2 gap-4 clear-both mb-16 w-1/2`}\n      >\n        {peopleStore.people.map((person, index) => {\n          return <PersonCard person={person} />;\n        })}\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\n\nexport const Header: React.FC = () => {\n  return <div className=\"w-full text-center py-14 mb-8\">\n      <h1 className=\"text-8xl text-black\"><span className=\"italic font-bold\">SWAPI</span>-PLE</h1>\n  </div>;\n};\n","import { observer } from \"mobx-react\";\nimport React, { useContext, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { peopleContext } from \"./store/PeopleStore\";\nimport { Loading } from \"./components/Loading\";\nimport { Pagination } from \"semantic-ui-react\";\nimport { useEffect } from \"react\";\nimport { Details } from \"./components/Details\";\nimport { PeopleList } from \"./components/PeopleList\";\nimport { Header } from \"./components/Header\";\n\nexport const App: React.FC = observer(() => {\n  const peopleStore = useContext(peopleContext);\n  const [activePage, setactivePage] = useState<string>(\"1\"); // Spice it up with a hook\n\n  useEffect(() => {\n    peopleStore.getPeople();\n  }, [peopleStore]);\n\n  return (\n    <div>\n      <Header />\n      <div className=\"grid justify-items-center grid-cols-1\">\n        <Router>\n          <Switch>\n            <Route path=\"/details\">\n              <Details />\n            </Route>\n\n            <Route path=\"/\">\n              {!peopleStore.loading && (\n                <>\n                  <PeopleList />\n                  <Pagination\n                    activePage={activePage}\n                    onPageChange={(e, { activePage }) => {\n                      setactivePage(`${activePage}`);\n                      peopleStore.getPeople(`${activePage}`);\n                    }}\n                    totalPages={peopleStore.pages}\n                    ellipsisItem={null}\n                  />\n                </>\n              )}\n              {peopleStore.loading && <Loading />}\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    </div>\n  );\n});\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { peopleContext, peopleStore } from \"./store/PeopleStore\";\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <peopleContext.Provider value={peopleStore}>\n      <App />\n    </peopleContext.Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}